// <auto-generated />
using System;
using ApplaudoWeek04CodeFirst.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApplaudoWeek04CodeFirst.Data.Migrations
{
    [DbContext(typeof(MoviesRentalDbContext))]
    [Migration("20230308020747_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("FirstMidName", "LastName")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstMidName = "Max",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 2,
                            FirstMidName = "Eve",
                            LastName = "Jackson"
                        },
                        new
                        {
                            Id = 3,
                            FirstMidName = "Mike",
                            LastName = "Thompson"
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Description = "Cuatro años después de la destrucción de Isla Nublar, los dinosaurios conviven – y cazan – con los seres humanos en todo el mundo. Este frágil equilibrio cambiará el futuro y decidirá, de una vez por todas, si los seres humanos seguirán en la cúspide de los depredadores en un planeta que comparten con los animales más temibles de la creación.",
                            PosterUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/VEZtsEQwsItZUoIdqzMwjvkwxI.jpg",
                            Price = 5.0,
                            Stock = 10,
                            Title = "Jurassic World: Dominion",
                            TrailerUrl = "https://youtu.be/9m9yRauMJIQ"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Description = "El cómico estadounidense Kevin Hart quiere ser una estrella de acción, pero para conseguir un papel que cambie su vida, primero tiene que aprender a ser un héroe de acción.",
                            PosterUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/xz91Gre0w7tyl99jGEh5oGc8DQ7.jpg",
                            Price = 4.0,
                            Stock = 2,
                            Title = "Duro de entrenar",
                            TrailerUrl = "https://youtu.be/kAYOmh5Kh2U"
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Description = "Otto Anderson (Tom Hanks) es un viudo cascarrabias y muy obstinado. Cuando una alegre joven familia se muda a la casa de al lado, Otto encuentra la horma de su zapato en la espabilada, y muy embarazada, Marisol, lo que conlleva a una muy improbable amistad que pondrá su mundo patas arriba. Remake de la película sueca 'A Man Called Ove' de 2015.",
                            PosterUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/8bNLrZt9lrmnt6LsaGG8GfDfgYR.jpg",
                            Price = 5.0,
                            Stock = 3,
                            Title = "El peor vecino del mundo",
                            TrailerUrl = "https://youtu.be/SC6CHBZa4Xg"
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCopies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 4,
                            Available = false,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 6,
                            Available = false,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieLike", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("MovieLikes");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CustomerId = 1,
                            Likes = 4
                        },
                        new
                        {
                            MovieId = 1,
                            CustomerId = 2,
                            Likes = 3
                        },
                        new
                        {
                            MovieId = 1,
                            CustomerId = 3,
                            Likes = 5
                        },
                        new
                        {
                            MovieId = 2,
                            CustomerId = 1,
                            Likes = 2
                        },
                        new
                        {
                            MovieId = 2,
                            CustomerId = 2,
                            Likes = 3
                        },
                        new
                        {
                            MovieId = 2,
                            CustomerId = 3,
                            Likes = 5
                        },
                        new
                        {
                            MovieId = 3,
                            CustomerId = 1,
                            Likes = 4
                        },
                        new
                        {
                            MovieId = 3,
                            CustomerId = 2,
                            Likes = 5
                        },
                        new
                        {
                            MovieId = 3,
                            CustomerId = 3,
                            Likes = 4
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieTag", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MovieTags");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            TagId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            TagId = 9
                        },
                        new
                        {
                            MovieId = 2,
                            TagId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            TagId = 4
                        },
                        new
                        {
                            MovieId = 2,
                            TagId = 8
                        },
                        new
                        {
                            MovieId = 3,
                            TagId = 1
                        },
                        new
                        {
                            MovieId = 3,
                            TagId = 2
                        },
                        new
                        {
                            MovieId = 3,
                            TagId = 5
                        },
                        new
                        {
                            MovieId = 3,
                            TagId = 10
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MovieCopyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 3, 7, 21, 7, 46, 772, DateTimeKind.Local).AddTicks(1215));

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MovieCopyId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            MovieCopyId = 1,
                            RentalDate = new DateTime(2023, 1, 5, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 6, 11, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            MovieCopyId = 2,
                            RentalDate = new DateTime(2023, 1, 5, 14, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 7, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            MovieCopyId = 3,
                            RentalDate = new DateTime(2023, 1, 6, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 8, 16, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            MovieCopyId = 4,
                            RentalDate = new DateTime(2023, 1, 7, 18, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 9, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 3,
                            MovieCopyId = 5,
                            RentalDate = new DateTime(2023, 1, 10, 8, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 11, 18, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CustomerId = 3,
                            MovieCopyId = 6,
                            RentalDate = new DateTime(2023, 1, 11, 9, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 12, 14, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CustomerId = 3,
                            MovieCopyId = 7,
                            RentalDate = new DateTime(2023, 1, 13, 16, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CustomerId = 3,
                            MovieCopyId = 8,
                            RentalDate = new DateTime(2023, 1, 14, 18, 50, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2023, 1, 16, 13, 50, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "G"
                        },
                        new
                        {
                            Id = 9,
                            Name = "PG"
                        },
                        new
                        {
                            Id = 10,
                            Name = "PG-14"
                        },
                        new
                        {
                            Id = 11,
                            Name = "R"
                        });
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieCopy", b =>
                {
                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.Movie", "Movie")
                        .WithMany("MovieCopies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieLike", b =>
                {
                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.Customer", "Customer")
                        .WithMany("MovieLikes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.Movie", "Movie")
                        .WithMany("MovieLikes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieTag", b =>
                {
                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.Movie", "Movie")
                        .WithMany("MovieTags")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.Tag", "Tag")
                        .WithMany("MovieTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Rental", b =>
                {
                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplaudoWeek04CodeFirst.Domain.MovieCopy", "MovieCopy")
                        .WithMany("Rentals")
                        .HasForeignKey("MovieCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MovieCopy");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Customer", b =>
                {
                    b.Navigation("MovieLikes");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Movie", b =>
                {
                    b.Navigation("MovieCopies");

                    b.Navigation("MovieLikes");

                    b.Navigation("MovieTags");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.MovieCopy", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ApplaudoWeek04CodeFirst.Domain.Tag", b =>
                {
                    b.Navigation("MovieTags");
                });
#pragma warning restore 612, 618
        }
    }
}
